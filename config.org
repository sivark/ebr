
* My literate config
** Setting up Elpaca for package management.
#+begin_src emacs-lisp
#+end_src
** Loading packages with Elpaca.
#+begin_src emacs-lisp
#+end_src
** Adding ef-themes
#+begin_src emacs-lisp
(use-package ef-themes)
(elpaca-wait) 
;(ef-themes-select 'ef-summer)
#+end_src
** Setting up Meow.
#+begin_src emacs-lisp
  (use-package meow)
  (elpaca-wait)

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode 1)
#+end_src
** Adding lambda themes
#+begin_src emacs-lisp
  (use-package lambda-themes
    :elpaca (:host github :repo "lambda-emacs/lambda-themes") 
    :custom
    (lambda-themes-set-italic-comments t)
    (lambda-themes-set-italic-keywords t)
    (lambda-themes-set-variable-pitch t) 
    ;; :config
    ;; load preferred theme
    ;; (load-theme 'lambda-light)
    )
#+end_src

** Adding Rougier's org-margin
#+begin_src emacs-lisp
(use-package org-margin 
:elpaca (:host github :repo "rougier/org-margin")
;:config
;(org-margin-mode 1)
)
#+end_src

#+begin_src emacs-lisp
(use-package kaolin-themes)
#+end_src

#+begin_src emacs-lisp
;  (use-package rose-pine-emacs
;    :elpaca (:host github :repo "thongpv87/rose-pine-emacs"))
#+end_src

Perspectives/spaces
#+begin_src emacs-lisp
  (use-package perspective
	;:bind
	;("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
	:custom
	(persp-mode-prefix-key (kbd "C-c C-v"))  ; pick your own prefix key here
	:init
	(persp-mode))
  ; (elpaca-wait)
    (use-package perspective-tabs
      :after (perspective)
      :elpaca (:host sourcehut :repo "woozong/perspective-tabs")
      :init
      (perspective-tabs-mode +1))
#+end_src

#+begin_src emacs-lisp
    (use-package tabspaces
      :elpaca (:type git :host github :repo "mclear-tools/tabspaces")
      :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
      :commands (tabspaces-switch-or-create-workspace
		 tabspaces-open-or-create-project-and-workspace)
      :custom
      (tabspaces-keymap-prefix (kbd "C-c TAB"))
      (tabspaces-use-filtered-buffers-as-default t)
      (tabspaces-default-tab "Default")
      (tabspaces-remove-to-default t)
      (tabspaces-include-buffers '("*scratch*"))
      (tabspaces-initialize-project-with-todo t)
      (tabspaces-todo-file-name "project-todo.org")
      ;; sessions
      (tabspaces-session t)
      (tabspaces-session-auto-restore t))

  (defvar tabspaces-command-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C") 'tabspaces-clear-buffers)
      (define-key map (kbd "b") 'tabspaces-switch-to-buffer)
      (define-key map (kbd "d") 'tabspaces-close-workspace)
      (define-key map (kbd "k") 'tabspaces-kill-buffers-close-workspace)
      (define-key map (kbd "o") 'tabspaces-open-or-create-project-and-workspace)
      (define-key map (kbd "r") 'tabspaces-remove-current-buffer)
      (define-key map (kbd "R") 'tabspaces-remove-selected-buffer)
      (define-key map (kbd "s") 'tabspaces-switch-or-create-workspace)
      (define-key map (kbd "t") 'tabspaces-switch-buffer-and-tab)
      map)
    "Keymap for tabspace/workspace commands after `tabspaces-keymap-prefix'.")
#+end_src




#+begin_src emacs-lisp
(use-package ace-window
  :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
              aw-char-position 'left
              aw-ignore-current nil
              aw-leading-char-style 'char
              aw-scope 'frame)
  :bind (("C-w" . ace-window)))  
#+end_src

#+begin_src emacs-lisp
      (use-package spacious-padding
	:config
	(spacious-padding-mode 1))
(scroll-bar-mode 0)
#+end_src

[[https://github.com/lassik/emacs-format-all-the-code][Format all the code]]
#+begin_src emacs-lisp
(use-package format-all
:commands format-all-mode
   :hook (prog-mode . format-all-mode)
   )
#+end_src

#+begin_src emacs-lisp
(use-package git-gutter
  :hook
  ((prog-mode . git-gutter-mode)
   (org-mode . git-gutter-mode))
  :config
  (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
(use-package all-the-icons
  :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package dashboard
     ;:elpaca t
    :config
	(setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
	(setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
        ;(setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
	(setq dashboard-center-content t)
	(setq dashboard-projects-backend 'project-el)
	(setq dashboard-items '((recents  . 5)
				;(bookmarks . 2)
				(projects . 5)
				(agenda . 5)
				;(registers . 5)
				))
        (advice-add #'dashboard-replace-displayable :override #'identity)
	    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
	    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
	    (dashboard-setup-startup-hook))
	  ; (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src
